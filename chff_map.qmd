---
title: "Crown Heights Food Forest Map"
author: "Uma Dwivedi (psychicautomaton)"
format: 
  html:
    theme: minty
    nav-buttons: [github]
    embed-resources: true
    github: https://github.com/psychicautomaton/
    grid:
      sidebar-width: 20px
      body-width: 1300px
      margin-width: 70px
---

```{r setup, include = FALSE}
knitr::opts_chunk$set(
  comment = '', 
  fig.width = 30, 
  fig.height = 20,
  echo = FALSE,
  warning = FALSE,
  message=FALSE
)
```

```{r, results = 'hide'}
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(mapboxapi))
mb_access_token("pk.eyJ1IjoicHN5Y2hpY2F1dG9tYXRvbiIsImEiOiJjbWE0ZjJuaXUwNjZzMmxweXlzcDN5OGQ5In0.Yme9yPL4rt8OuuySLUOYqg", install = TRUE, overwrite = TRUE)
suppressPackageStartupMessages(library(leaflet))
suppressPackageStartupMessages(library(sf))
suppressPackageStartupMessages(library(leafgl))
suppressPackageStartupMessages(library(htmlwidgets))
suppressPackageStartupMessages(library(htmltools))
suppressPackageStartupMessages(library(geojsonsf))
library(flextable)
```


```{r, results='hide'}
dbp <- "/Users/mxdwivedi/Documents/GIS/chff/chff_map/db_gpkg/chff.gpkg"
```

```{r, results='hide'}
mu_aggs <- st_read(dbp,
                      layer = "muaggatt") %>%
  select(
    musym,
    muname,
    slopegraddcp,
    flodfreqdcd,
    drclassdcd,
    engstafdcd,
    engsldcd
  ) %>%
  rename(
    slope_gradiant = slopegraddcp,
    flooding_freq = flodfreqdcd,
    drainage_class = drclassdcd,
    septic_tank_absorption = engstafdcd,
    sewage_lagoons = engsldcd
  )



lims_soil_organisms <- st_read(dbp,
                               layer = "rating_AeriOrgL_DCD") %>%
  select(musym,
         muname,
         AeriOrgL_DCD
        #  
         ) %>%
  rename(limits_aerobic_organisms = AeriOrgL_DCD)



depth_water_table <- st_read(dbp,
                             layer = "rating_Dep2WatTbl_DCD_jan_dec") %>%
  select(musym, muname, Dep2WatTbl_DCD_jan_dec) %>%
  rename(depth_to_water_table = Dep2WatTbl_DCD_jan_dec)


drought_vuln <- st_read(dbp,
                        layer = "rating_DrouVulSoi_DCD") %>%
  select(musym, muname, DrouVulSoi_DCD) %>%
  rename(drought_vulnerability = DrouVulSoi_DCD)

hand_planting_suitability <- st_read(dbp,
                                     layer = "rating_HandPlant_DCD") %>%
  select(musym, muname, HandPlant_DCD) %>%
  rename(hand_planting_suitability = HandPlant_DCD)


compaction_susceptibility <- st_read(dbp,
                                     layer = "rating_SoilSuscCo_DCD") %>%
  select(musym, muname, SoilSuscCo_DCD) %>%
  rename(compaction_susceptibility = SoilSuscCo_DCD)

surface_texture <- st_read(dbp,
                           layer = "rating_SurfText_DCD_SL") %>%
  select(musym, muname, SurfText_DCD_SL) %>%
  rename(surface_texture = SurfText_DCD_SL)


crop_productivity_index <- st_read(dbp,
                                   layer = "rating_NCCPI_WA") %>%
  select(musym, muname, NCCPI_WA) %>%
  rename(crop_productivity_index = NCCPI_WA)

ph <- st_read(dbp,
              layer = "rating_pHwater_DCD_AL") %>%
  select(musym, muname, pHwater_DCD_AL) %>%
  rename(water_pH = pHwater_DCD_AL)


musym <- st_read(dbp,
                      layer = "mapunit")  %>% 
  select(musym, muname, interpfocus,
         muacres, farmlndcl) %>% 
  rename(interpretive_focus = interpfocus,
         farmland_class = farmlndcl) %>%
  distinct()


mupoly <- st_read(dbp,
                      layer = "mupolygon") %>%
  select(musym, shape) %>% distinct()


```


```{r data_cleaning}

df <- left_join(mupoly, musym, by = "musym") %>%
  left_join(mu_aggs, by = c("musym", "muname")) %>%
  left_join(lims_soil_organisms, by = c("musym", "muname")) %>%
  left_join(depth_water_table, by = c("musym", "muname")) %>%
  left_join(drought_vuln, by = c("musym", "muname")) %>%
  left_join(hand_planting_suitability, by = c("musym", "muname")) %>%
  left_join(compaction_susceptibility, by = c("musym", "muname")) %>%
  left_join(surface_texture, by = c("musym", "muname")) %>%
  left_join(crop_productivity_index, by = c("musym", "muname")) %>%
  left_join(ph, by = c("musym", "muname")) %>%
  distinct()

soil_survey <- st_transform(df, crs = "OGC:CRS84")

```

```{r import_geojson_ch_mask}
ch_mask <- geojson_sf("crown_heights_mask.geojson")
ch_mask <- sf::st_transform(ch_mask, crs = "OGC:CRS84")
```

```{r}
selected_map_units <- soil_survey %>%
  st_filter(y = ch_mask, .predicate = st_overlaps)
```


```{r, results='hide'}
chff <- st_read('chff_pluto.shp') %>%
  filter(LotArea > 5445 #& grepl("v.*",
                                #BldgClass,
                                #ignore.case = T
                                #)
         ) 

chff <- st_transform(chff, crs = "OGC:CRS84")

chff <- chff %>%
  st_filter(y = ch_mask, .predicate = st_intersects)

owner_type <- read.csv('owner_type_codes.csv')

chff <- left_join(chff, owner_type,
                  by = c('OwnerType' = 'Code')) %>%
  mutate(Description = replace_na(Description, 'Unknown (usually private)')) %>%
  mutate(Description = fct_recode(Description,
                                  "City" = "City ownership",
                                  "Tax-Exempt" = "Fully tax-exempt property that may be owned by the city, state, or federal government; a public authority; or a private institution",
                                  "Mixed City & Private" = "Mixed city and private ownership",
                                  "Public Authority" = "Other â€” owned by either a public authority or the state or federal government",
                                  "Private" = "	Private ownership"),
         vacant_status = fct_recode(BldgClass,
                                    "Vacant" = "V0",
                                    "Vacant" = "V1",
                                    "Public Rec." = "Q0",
                                    "Public Rec." = "Q1",
                                    "Public Rec." = "Q2",
                                    "Public Rec." = "Q3",
                                    "Public Rec." = "Q4",
                                    "Public Rec." = "Q5",
                                    "Public Rec." = "Q6",
                                    "Public Rec." = "Q7",
                                    "Public Rec." = "Q8",
                                    "Public Rec." = "Q9")) 


```

```{r}

```

# Interactive Map of Crown Heights for Site Selection for a Food Forest

# 

### (lots with area \> 1/8th acre that are either vacant or zoned for public recreation)

You can click on the interactive lots below to see more details.

```{r, fig.height=40}
pal <- colorFactor(palette = "viridis",
                    domain = chff$Description)
leaflet(chff) %>%
  addMapboxTiles(
    style_id = "cmabwhdzg007c01rz4ejl7nel",
    username = "psychicautomaton"
  ) %>%
  setView(
    lng = -73.94107,
    lat = 40.67045,
    zoom = 13.5
  ) %>%
  addPolygons(color = pal(chff$Description),
              label= paste0("Block-Lot #:",
                            chff$Block, 
                            "-",
                            chff$Lot, 
                            " | Owner: ",
                            chff$OwnerName, 
                            " (Bldg. Class: ",
                            chff$vacant_status,
                            ")"),
              popup = ~paste0("Address: ", chff$Address,
                              "<br> Ownership Type: ", chff$Description,
                              "<br> Owner Name: ", chff$OwnerName,
                              "<br> Lot Area: ", 
                              paste0(scales::label_comma(accuracy = 1)(chff$LotArea), " sq ft"),
                              "<br> Land Use Code: ", chff$LandUse,
                              "<br> Council: ", chff$Council,
                              "<br> Assessed Value: ", 
                              paste0("$",
                                     scales::label_comma(accuracy = 1)(chff$AssessTot)))) %>%
  addPolygons(data = selected_map_units) %>%
  addLegend("bottomright", 
            pal = pal, 
            values = ~Description,
    title = "Owner Type",
    opacity = .6)
```
